@import "sass-breakpoints";
@import "./index";

$grid-breakpoint-attribute-prefix: "u-" !default;

@function grid-attr($breakpoint) {
  @return "#{$grid-breakpoint-attribute-prefix}#{$breakpoint}";
}

// ======= Grid styles =======

@mixin attribute-grid($breakpoint) {
  $attr: grid-attr($breakpoint);

  // ------ Horizontal alignment -------

  .grid[#{$attr}~="halign:left"] {
    @include grid--halign-left();
  }

  //fixme: what if it was centered and reversed at different breakpoints? this won't work - need to iterate each breakpoint with each breakpoint?
  .grid[#{$attr}~="halign:left"].grid__unit[#{$attr}~="order:reversed"] {
    @include grid--halign-left(true);
  }

  .grid[#{$attr}~="halign:center"] {
    @include grid--halign-center();
  }

  .grid[#{$attr}~="halign:right"] {
    @include grid--halign-right();
  }

  //fixme: what if it was centered and reversed at different breakpoints? this won't work - need to iterate each breakpoint with each breakpoint?
  .grid[#{$attr}~="halign:right"].grid__unit[#{$attr}~="order:reversed"] {
    @include grid--halign-right(true);
  }

  .grid[#{$attr}~="halign:justify"] {
    @include grid--halign-justify();
  }

  .grid[#{$attr}~="halign:justify-center"] {
    @include grid--halign-justify-center();
  }

  // ------ Vertical alignment -------

  .grid[#{$attr}~="valign:top"] {
    @include grid--valign-top();
  }

  .grid[#{$attr}~="valign:middle"] {
    @include grid--valign-middle();
  }

  .grid[#{$attr}~="valign:bottom"] {
    @include grid--valign-bottom();
  }

  .grid[#{$attr}~="valign:stretch"] {
    @include grid--valign-stretch();
  }

  // ------ Ordering -------

  .grid[#{$attr}~="order:reverse"] {
    @include grid--order-reverse();
  }

  // ------ Wrapping -------

  .grid[#{$attr}~="wrap:wrap"] {
    @include grid--wrap-wrap();
  }

  .grid[#{$attr}~="wrap:nowrap"] {
    @include grid--wrap-nowrap();
  }

  .grid[#{$attr}~="wrap:wrap-reverse"] {
    @include grid--wrap-wrap-reverse();
  }

}

// ======= Grid Unit =======

@mixin attribute-grid-unit($breakpoint) {

  // ------ Columns -------

  .grid__unit[#{grid-attr($breakpoint)}~="cols:min"] {
    @include grid__unit--cols('min');
  }

  .grid__unit[#{grid-attr($breakpoint)}~="cols:max"] {
    @include grid__unit--cols('max');
  }

  @for $i from 1 through $grid_columns {

    .grid__unit[#{grid-attr($breakpoint)}~="cols:#{$i}"] {
      @include grid__unit--cols($i);
    }

  }

  // ------ Visibility -------

  .grid__unit[#{grid-attr($breakpoint)}~="visible"] {
    @include grid__unit--visible();
  }

  .grid__unit[#{grid-attr($breakpoint)}~="invisible"] {
    @include grid__unit--invisible();
  }

  // ------ Ordering -------

  .grid__unit[#{grid-attr($breakpoint)}~="order:first"] {
    @include grid__unit--order-first();
  }

  .grid__unit[#{grid-attr($breakpoint)}~="order:last"] {
    @include grid__unit--order-last();
  }

}

.grid {
  @include grid();
}

.grid__unit {
  @include grid__unit();
}

//repeat styles for each breakpoint
@each $breakpoint, $px in $breakpoints {
  @include breakpoint($breakpoint) {

    @include attribute-grid($breakpoint);
    @include attribute-grid-unit($breakpoint);

    //TODO: move to their own solution

    // ------ Text alignment -------

    [#{grid-attr($breakpoint)}~="text:left"] {
      text-align: left;
    }

    [#{grid-attr($breakpoint)}~="text:center"] {
      text-align: center;
    }

    [#{grid-attr($breakpoint)}~="text:right"] {
      text-align: right;
    }

    // ------ Element visibility -------

    [#{$grid-breakpoint-attribute-prefix}#{$breakpoint}~="display:none"] {
      display: none;
    }

    [#{$grid-breakpoint-attribute-prefix}#{$breakpoint}~="display:inline"] {
      display: inline;
    }

    [#{$grid-breakpoint-attribute-prefix}#{$breakpoint}~="display:inline-block"] {
      display: inline-block;
    }

    [#{$grid-breakpoint-attribute-prefix}#{$breakpoint}~="display:block"] {
      display: block;
    }

  }
}
